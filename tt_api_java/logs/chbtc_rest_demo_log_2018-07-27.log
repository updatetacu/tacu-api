2018-07-27 11:37:41  [ main:1 ] - [ ERROR ]  获取交易json异常
org.apache.http.conn.ConnectTimeoutException: Connect to trade.ttex.com:443 [trade.ttex.com/47.91.2.121] failed: connect timed out
	at org.apache.http.impl.conn.DefaultHttpClientConnectionOperator.connect(DefaultHttpClientConnectionOperator.java:143)
	at org.apache.http.impl.conn.PoolingHttpClientConnectionManager.connect(PoolingHttpClientConnectionManager.java:353)
	at org.apache.http.impl.execchain.MainClientExec.establishRoute(MainClientExec.java:380)
	at org.apache.http.impl.execchain.MainClientExec.execute(MainClientExec.java:236)
	at org.apache.http.impl.execchain.ProtocolExec.execute(ProtocolExec.java:184)
	at org.apache.http.impl.execchain.RetryExec.execute(RetryExec.java:88)
	at org.apache.http.impl.execchain.RedirectExec.execute(RedirectExec.java:110)
	at org.apache.http.impl.client.InternalHttpClient.doExecute(InternalHttpClient.java:184)
	at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:82)
	at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:107)
	at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:55)
	at com.ttex.kits.HttpUtilManager.requestHttpPost(HttpUtilManager.java:282)
	at com.ttex.api.RestTest.getJsonPost(RestTest.java:400)
	at com.ttex.api.RestTest.testOrder(RestTest.java:48)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:76)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:236)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:157)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)
Caused by: java.net.SocketTimeoutException: connect timed out
	at java.net.DualStackPlainSocketImpl.waitForConnect(Native Method)
	at java.net.DualStackPlainSocketImpl.socketConnect(DualStackPlainSocketImpl.java:85)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:339)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:200)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:182)
	at java.net.PlainSocketImpl.connect(PlainSocketImpl.java:172)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)
	at java.net.Socket.connect(Socket.java:579)
	at org.apache.http.conn.ssl.SSLConnectionSocketFactory.connectSocket(SSLConnectionSocketFactory.java:338)
	at org.apache.http.impl.conn.DefaultHttpClientConnectionOperator.connect(DefaultHttpClientConnectionOperator.java:134)
	... 34 more
2018-07-27 11:55:35  [ main:0 ] - [ ERROR ]  获取交易json异常
java.net.UnknownHostException: api.ttex.comorder
	at java.net.Inet6AddressImpl.lookupAllHostAddr(Native Method)
	at java.net.InetAddress$1.lookupAllHostAddr(InetAddress.java:901)
	at java.net.InetAddress.getAddressesFromNameService(InetAddress.java:1295)
	at java.net.InetAddress.getAllByName0(InetAddress.java:1248)
	at java.net.InetAddress.getAllByName(InetAddress.java:1164)
	at java.net.InetAddress.getAllByName(InetAddress.java:1098)
	at org.apache.http.impl.conn.SystemDefaultDnsResolver.resolve(SystemDefaultDnsResolver.java:45)
	at org.apache.http.impl.conn.DefaultHttpClientConnectionOperator.connect(DefaultHttpClientConnectionOperator.java:111)
	at org.apache.http.impl.conn.PoolingHttpClientConnectionManager.connect(PoolingHttpClientConnectionManager.java:353)
	at org.apache.http.impl.execchain.MainClientExec.establishRoute(MainClientExec.java:380)
	at org.apache.http.impl.execchain.MainClientExec.execute(MainClientExec.java:236)
	at org.apache.http.impl.execchain.ProtocolExec.execute(ProtocolExec.java:184)
	at org.apache.http.impl.execchain.RetryExec.execute(RetryExec.java:88)
	at org.apache.http.impl.execchain.RedirectExec.execute(RedirectExec.java:110)
	at org.apache.http.impl.client.InternalHttpClient.doExecute(InternalHttpClient.java:184)
	at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:82)
	at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:107)
	at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:55)
	at com.ttex.kits.HttpUtilManager.requestHttpPost(HttpUtilManager.java:282)
	at com.ttex.api.RestTest.getJsonPost(RestTest.java:401)
	at com.ttex.api.RestTest.testOrder(RestTest.java:49)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:76)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:236)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:157)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)
2018-07-27 12:00:55  [ main:0 ] - [ INFO ]  testGetAccountInfo 结果: <!DOCTYPE html>
<html>
<head>
<meta charset="utf-8" />
<title>HTTP Error 403</title>
<style>

</style>
<script>
var error_403 = '';
if(error_403 == '') {
	error_403 = 'Request denied';
}
</script>
</head>
<body>

<h1>HTTP Error 403</h1>
<span class="r-tip01"><script>document.write(error_403);</script></span>

<hr>
<p> 114.249.59.32/9b7b529 [80042] </p>
<p> 2018-07-27 12:00:55 </p>
</body>
</html>

2018-07-27 12:03:53  [ main:0 ] - [ INFO ]  testGetAccount 结果: <!DOCTYPE html>
<html>
<head>
<meta charset="utf-8" />
<title>HTTP Error 403</title>
<style>

</style>
<script>
var error_403 = '';
if(error_403 == '') {
	error_403 = 'Request denied';
}
</script>
</head>
<body>

<h1>HTTP Error 403</h1>
<span class="r-tip01"><script>document.write(error_403);</script></span>

<hr>
<p> 114.249.59.32/9b7b529 [80042] </p>
<p> 2018-07-27 12:03:53 </p>
</body>
</html>

2018-07-27 12:05:28  [ main:0 ] - [ INFO ]  testGetAccount 结果: <!DOCTYPE html>
<html>
<head>
<meta charset="utf-8" />
<title>HTTP Error 403</title>
<style>

</style>
<script>
var error_403 = '';
if(error_403 == '') {
	error_403 = 'Request denied';
}
</script>
</head>
<body>

<h1>HTTP Error 403</h1>
<span class="r-tip01"><script>document.write(error_403);</script></span>

<hr>
<p> 114.249.59.32/9b7b529 [80042] </p>
<p> 2018-07-27 12:05:28 </p>
</body>
</html>

2018-07-27 12:05:54  [ main:0 ] - [ INFO ]  testGetAccount 结果: <!DOCTYPE html>
<html>
<head>
<meta charset="utf-8" />
<title>HTTP Error 403</title>
<style>

</style>
<script>
var error_403 = '';
if(error_403 == '') {
	error_403 = 'Request denied';
}
</script>
</head>
<body>

<h1>HTTP Error 403</h1>
<span class="r-tip01"><script>document.write(error_403);</script></span>

<hr>
<p> 114.249.59.32/9b7b529 [80042] </p>
<p> 2018-07-27 12:05:54 </p>
</body>
</html>

2018-07-27 12:06:49  [ main:0 ] - [ INFO ]  testGetAccount 结果: <!DOCTYPE html>
<html>
<head>
<meta charset="utf-8" />
<title>HTTP Error 403</title>
<style>

</style>
<script>
var error_403 = '';
if(error_403 == '') {
	error_403 = 'Request denied';
}
</script>
</head>
<body>

<h1>HTTP Error 403</h1>
<span class="r-tip01"><script>document.write(error_403);</script></span>

<hr>
<p> 114.249.59.32/9b7b529 [80042] </p>
<p> 2018-07-27 12:06:49 </p>
</body>
</html>

2018-07-27 12:09:51  [ main:0 ] - [ INFO ]  testGetAccount 结果: <!DOCTYPE html>
<html>
<head>
<meta charset="utf-8" />
<title>HTTP Error 403</title>
<style>

</style>
<script>
var error_403 = '';
if(error_403 == '') {
	error_403 = 'Request denied';
}
</script>
</head>
<body>

<h1>HTTP Error 403</h1>
<span class="r-tip01"><script>document.write(error_403);</script></span>

<hr>
<p> 114.249.59.32/1987415 [80042] </p>
<p> 2018-07-27 12:09:51 </p>
</body>
</html>

2018-07-27 13:34:08  [ main:0 ] - [ INFO ]  testGetAccount 结果: <!DOCTYPE html>
<html>
<head>
<meta charset="utf-8" />
<title>HTTP Error 403</title>
<style>

</style>
<script>
var error_403 = '';
if(error_403 == '') {
	error_403 = 'Request denied';
}
</script>
</head>
<body>

<h1>HTTP Error 403</h1>
<span class="r-tip01"><script>document.write(error_403);</script></span>

<hr>
<p> 114.249.59.32/86c25c3 [80042] </p>
<p> 2018-07-27 13:34:08 </p>
</body>
</html>

2018-07-27 13:38:44  [ main:0 ] - [ INFO ]  testGetAccount 结果: <!DOCTYPE html>
<html>
<head>
<meta charset="utf-8" />
<title>HTTP Error 403</title>
<style>

</style>
<script>
var error_403 = '';
if(error_403 == '') {
	error_403 = 'Request denied';
}
</script>
</head>
<body>

<h1>HTTP Error 403</h1>
<span class="r-tip01"><script>document.write(error_403);</script></span>

<hr>
<p> 114.249.59.32/1987415 [80042] </p>
<p> 2018-07-27 13:38:44 </p>
</body>
</html>

2018-07-27 13:48:55  [ main:0 ] - [ INFO ]  testGetAccount 结果: <!DOCTYPE html>
<html>
<head>
<meta charset="utf-8" />
<title>HTTP Error 403</title>
<style>

</style>
<script>
var error_403 = '';
if(error_403 == '') {
	error_403 = 'Request denied';
}
</script>
</head>
<body>

<h1>HTTP Error 403</h1>
<span class="r-tip01"><script>document.write(error_403);</script></span>

<hr>
<p> 114.249.59.32/9b7b529 [80042] </p>
<p> 2018-07-27 13:48:55 </p>
</body>
</html>

2018-07-27 16:14:15  [ main:0 ] - [ INFO ]  testGetAccount 结果: {"code":"70001","location":null}
2018-07-27 17:24:59  [ main:0 ] - [ INFO ]  testGetAccount 结果: {"code":"70001","location":null}
2018-07-27 17:28:43  [ main:0 ] - [ INFO ]  testGetAccount 结果: {"code":"70001","location":null}
2018-07-27 17:29:05  [ main:1 ] - [ INFO ]  testGetAccount 结果: {"code":"70001","location":null}
2018-07-27 17:29:37  [ main:0 ] - [ INFO ]  testGetAccount 结果: {"code":"70001","location":null}
2018-07-27 17:31:20  [ main:0 ] - [ INFO ]  testGetAccount 结果: {"code":"70001","location":null}
2018-07-27 17:31:56  [ main:0 ] - [ INFO ]  testGetAccount 结果: {"code":"70001","location":null}
2018-07-27 17:38:33  [ main:0 ] - [ INFO ]  testGetAccount 结果: <!DOCTYPE html>
<html>
<head>
<meta charset="utf-8" />
<title>HTTP Error 403</title>
<style>

</style>
<script>
var error_403 = '';
if(error_403 == '') {
	error_403 = 'Request denied';
}
</script>
</head>
<body>

<h1>HTTP Error 403</h1>
<span class="r-tip01"><script>document.write(error_403);</script></span>

<hr>
<p> 114.249.59.32/1987415 [80042] </p>
<p> 2018-07-27 17:38:34 </p>
</body>
</html>

2018-07-27 18:05:08  [ main:0 ] - [ INFO ]  testGetAccount 结果: {"code":"70001","location":null}
2018-07-27 18:12:18  [ main:0 ] - [ INFO ]  testGetAccount 结果: {"code":"70001","location":null}
2018-07-27 18:13:04  [ main:0 ] - [ INFO ]  testGetAccount 结果: {"code":"70001","location":null}
2018-07-27 18:13:27  [ main:0 ] - [ INFO ]  testGetAccount 结果: {"code":"70001","location":null}
2018-07-27 18:20:44  [ main:0 ] - [ INFO ]  testGetAccount 结果: {"code":"70001","location":null}
2018-07-27 18:26:15  [ main:0 ] - [ INFO ]  testGetAccount 结果: {"code":"70001","location":null}
2018-07-27 18:26:43  [ main:0 ] - [ INFO ]  testGetAccount 结果: {"code":"70001","location":null}
2018-07-27 18:28:25  [ main:1 ] - [ INFO ]  testGetAccount 结果: {"code":"70001","location":null}
2018-07-27 18:29:32  [ main:0 ] - [ INFO ]  testGetAccount 结果: {"code":"70001","location":null}
2018-07-27 18:32:01  [ main:0 ] - [ INFO ]  testGetAccount 结果: {"code":"70001","location":null}
2018-07-27 18:35:36  [ main:0 ] - [ INFO ]  testGetAccount 结果: {"code":"70001","location":null}
